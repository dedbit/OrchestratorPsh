# sync-parameters.ps1
# This script synchronizes parameters between environments/dev.json and main.parameters.json
param(
    [Parameter(HelpMessage="Force synchronization without prompting for confirmation")]
    [switch]$Force
)

Write-Host "Synchronizing parameters between environment config and parameters file..." -ForegroundColor Cyan

# Load environment configuration
$envConfigPath = "..\environments\dev.json"
$paramFilePath = "main.parameters.json"

if (-not (Test-Path $envConfigPath)) {
    Write-Warning "Could not find environment config at $envConfigPath. Will continue with parameter file values."
    # Return without error to allow deploy-bicep.ps1 to continue
    return
}

if (-not (Test-Path $paramFilePath)) {
    Write-Error "Parameters file not found at $paramFilePath"
    exit 1
}

# Load environment configuration
$envConfig = Get-Content -Path $envConfigPath -Raw | ConvertFrom-Json
$paramFile = Get-Content -Path $paramFilePath -Raw | ConvertFrom-Json

# Extract values
$envTenantId = $envConfig.tenantId
$envSubscriptionId = $envConfig.subscriptionId
$envKeyVaultName = $envConfig.keyVaultName
$envResourceGroupName = $envConfig.resourceGroupName
$envLocation = $envConfig.location

$paramTenantId = $paramFile.parameters.tenantId.value
$paramSubscriptionId = $paramFile.parameters.subscriptionId.value
$paramKeyVaultName = $paramFile.parameters.keyVaultName.value
$paramResourceGroupName = $paramFile.parameters.resourceGroupName.value
$paramLocation = $paramFile.parameters.location.value

# Display comparison
Write-Host "Comparing values:" -ForegroundColor Yellow
Write-Host "Parameter                Environment Config          Parameters File               Match" -ForegroundColor White
Write-Host "-------------------------------------------------------------------------------------" -ForegroundColor White

function Compare-Values($name, $env, $param) {
    $match = $env -eq $param
    $matchSymbol = if ($match) { "✓" } else { "✗" }
    $matchColor = if ($match) { "Green" } else { "Red" }
    
    # Format the string with proper spacing
    $formatString = "{0,-25} {1,-25} {2,-25} {3}"
    
    Write-Host ($formatString -f $name, $env, $param, $matchSymbol) -ForegroundColor $matchColor
}

Compare-Values "Tenant ID" $envTenantId $paramTenantId
Compare-Values "Subscription ID" $envSubscriptionId $paramSubscriptionId
Compare-Values "Key Vault Name" $envKeyVaultName $paramKeyVaultName
Compare-Values "Resource Group Name" $envResourceGroupName $paramResourceGroupName
Compare-Values "Location" $envLocation $paramLocation

# Ask if user wants to sync (unless Force is specified)
$sync = "n"
if ($Force) {
    Write-Host "Force parameter specified. Synchronizing without confirmation." -ForegroundColor Yellow
    $sync = "y"
} else {
    $sync = Read-Host -Prompt "Do you want to synchronize the parameters file with environment config values? (y/n)"
}

if ($sync -eq "y" -or $sync -eq "Y") {# Update parameters file
    $paramFile.parameters.tenantId.value = $envTenantId
    $paramFile.parameters.subscriptionId.value = $envSubscriptionId
    $paramFile.parameters.keyVaultName.value = $envKeyVaultName
    $paramFile.parameters.resourceGroupName.value = $envResourceGroupName
    $paramFile.parameters.location.value = $envLocation
      # Save updated parameters file with warning header
    $paramFileContent = @"
// -----------------------------------------------------------------
// AUTO-GENERATED FILE - DO NOT EDIT DIRECTLY
// 
// This file is automatically generated from environments/dev.json 
// by the deploy-bicep.ps1 script. Any manual changes will be lost 
// when the script runs again.
// -----------------------------------------------------------------
"@
    
    $paramJson = $paramFile | ConvertTo-Json -Depth 10
    $paramFileContent += "`n" + $paramJson
    Set-Content -Path $paramFilePath -Value $paramFileContent
      Write-Host "Parameters file updated successfully with environment config values." -ForegroundColor Green
    $syncMethod = if ($Force) { "automatic" } else { "manual" }
    Write-Host "The following values were synchronized ($syncMethod sync):" -ForegroundColor Green
    Write-Host "  - Tenant ID: $envTenantId" -ForegroundColor Cyan
    Write-Host "  - Subscription ID: $envSubscriptionId" -ForegroundColor Cyan
    Write-Host "  - Key Vault Name: $envKeyVaultName" -ForegroundColor Cyan
    Write-Host "  - Resource Group Name: $envResourceGroupName" -ForegroundColor Cyan
    Write-Host "  - Location: $envLocation" -ForegroundColor Cyan
} else {
    Write-Host "Synchronization canceled. No changes were made." -ForegroundColor Yellow
}

Write-Host "Done." -ForegroundColor Cyan
